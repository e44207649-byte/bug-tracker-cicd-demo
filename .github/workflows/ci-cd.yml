name: üöÄ CI/CD Pipeline - Bug Tracker Demo

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

jobs:
  # ==========================================
  # QUALITY ASSURANCE & TESTING
  # ==========================================
  quality:
    name: üîç Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4
        
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install Dependencies
        run: npm ci
        
      - name: üßπ ESLint Check
        run: npm run lint
        
      - name: üß™ Unit Tests
        run: npm run test:coverage
        
      - name: üìä Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
      - name: üíæ Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  # ==========================================
  # END-TO-END TESTING
  # ==========================================
  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4
        
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install Dependencies
        run: npm ci
        
      - name: üèóÔ∏è Build Application
        run: npm run build
        
      - name: üé≠ Run Cypress E2E Tests
        uses: cypress-io/github-action@v6
        with:
          start: npm start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: chrome
          record: false
          
      - name: üì∏ Upload Screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          
      - name: üìπ Upload Videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  # ==========================================
  # BUILD APPLICATION
  # ==========================================
  build:
    name: üèóÔ∏è Build Application
    runs-on: ubuntu-latest
    needs: [quality, e2e-tests]
    
    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4
        
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install Dependencies
        run: npm ci
        
      - name: üèóÔ∏è Build Application
        run: npm run build
        
      - name: üì¶ Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            package.json
            package-lock.json
          retention-days: 7

  # ==========================================
  # DEPLOY TO STAGING
  # ==========================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4
        
      - name: üöÄ Deploy to Vercel (Staging)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: üè• Health Check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          echo "Testing deployment URL: ${{ steps.deploy.outputs.preview-url }}"
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.preview-url }}")
          if [ $response -eq 200 ]; then
            echo "‚úÖ Staging deployment is healthy (HTTP 200)"
          elif [ $response -eq 401 ]; then
            echo "‚úÖ Staging deployment is healthy (HTTP 401 - Protected by Vercel auth)"
          else
            echo "‚ùå Staging deployment failed health check (HTTP $response)"
            exit 1
          fi
          
      - name: üí¨ Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Staging Deployment Ready!**
              
              üì± Preview URL: ${{ steps.deploy.outputs.preview-url }}
              
              ‚úÖ All tests passed
              ‚úÖ Build successful
              ‚úÖ Deployment completed
              
              Ready for review! üéâ`
            })

  # ==========================================
  # JIRA INTEGRATION - STAGING UPDATES
  # ==========================================
  update-jira-staging:
    name: üìù Update Jira (Staging)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: contains(github.event.head_commit.message, 'DEMO-') || contains(github.event.pull_request.title, 'DEMO-')
    
    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4
        
      - name: üìù Extract Jira Issue Key
        id: jira-key
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            MESSAGE="${{ github.event.pull_request.title }}"
          else
            MESSAGE="${{ github.event.head_commit.message }}"
          fi
          ISSUE_KEY=$(echo "$MESSAGE" | grep -oP 'DEMO-\d+' | head -1)
          echo "issue-key=$ISSUE_KEY" >> $GITHUB_OUTPUT
          echo "Found Jira issue: $ISSUE_KEY"
          
      - name: üìù Add Staging Comment to Jira
        if: steps.jira-key.outputs.issue-key != ''
        continue-on-error: true
        run: |
          echo "Adding comment to Jira ticket: ${{ steps.jira-key.outputs.issue-key }}"
          
          # Normalize URL (remove trailing slash)
          JIRA_URL="${{ secrets.JIRA_BASE_URL }}"
          JIRA_URL=${JIRA_URL%/}  # Remove trailing slash if present
          
          # Create base64 auth header with no line breaks
          AUTH_HEADER=$(echo -n '${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}' | base64 -w 0)
          
          # Create properly formatted JSON for Jira comment
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Basic $AUTH_HEADER" \
            -d '{
              "body": "üöÄ *Staging Deployment Complete*\n\n*Environment:* Staging\n*Deployment URL:* ${{ needs.deploy-staging.outputs.preview-url || 'Available via Vercel dashboard' }}\n*Commit:* ${{ github.sha }}\n*Branch:* ${{ github.ref_name }}\n*Author:* ${{ github.actor }}\n\n‚úÖ All tests passed\n‚úÖ Quality checks passed\n‚úÖ Deployment successful\n\nReady for testing and review!"
            }' \
            "$JIRA_URL/rest/api/2/issue/${{ steps.jira-key.outputs.issue-key }}/comment" \
            -w "HTTP_STATUS:%{http_code}" \
            -o /tmp/jira_response.json
          
          # Check if the request was successful
          if grep -q "HTTP_STATUS:201" /tmp/jira_response.json 2>/dev/null; then
            echo "‚úÖ Successfully added comment to Jira ticket"
          else
            echo "‚ö†Ô∏è Jira comment may have failed - continuing anyway"
            cat /tmp/jira_response.json 2>/dev/null || echo "(no response file)"
          fi

  # ==========================================
  # DEPLOY TO PRODUCTION (MANUAL APPROVAL)
  # ==========================================
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://bug-tracker-cicd-demo.vercel.app
    
    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4
        
      - name: üåü Deploy to Vercel (Production)
        id: deploy-prod
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: üè• Production Health Check
        run: |
          echo "Waiting for production deployment to be ready..."
          sleep 45
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://bug-tracker-cicd-demo.vercel.app")
            if [ $response -eq 200 ]; then
              echo "‚úÖ Production deployment is healthy (attempt $i)"
              break
            else
              echo "‚è≥ Health check attempt $i failed (HTTP $response), retrying..."
              sleep 15
            fi
            if [ $i -eq 5 ]; then
              echo "‚ùå Production health check failed after 5 attempts"
              exit 1
            fi
          done
          
      - name: üéâ Production Deployment Success
        run: |
          echo "üéâ Production deployment successful!"
          echo "üåü URL: https://bug-tracker-cicd-demo.vercel.app"
          echo "üìä Commit: ${{ github.sha }}"
          echo "üë§ Deployed by: ${{ github.actor }}"

  # ==========================================
  # JIRA INTEGRATION - PRODUCTION UPDATES
  # ==========================================
  update-jira-production:
    name: üìù Update Jira (Production)
    runs-on: ubuntu-latest
    needs: deploy-production
    if: contains(github.event.head_commit.message, 'DEMO-')
    
    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4
        
      - name: üìù Extract Jira Issue Key
        id: jira-key
        run: |
          MESSAGE="${{ github.event.head_commit.message }}"
          ISSUE_KEY=$(echo "$MESSAGE" | grep -oP 'DEMO-\d+' | head -1)
          echo "issue-key=$ISSUE_KEY" >> $GITHUB_OUTPUT
          echo "Found Jira issue: $ISSUE_KEY"
          
      - name: üìù Add Production Comment to Jira
        if: steps.jira-key.outputs.issue-key != ''
        continue-on-error: true
        run: |
          echo "Adding production comment to Jira ticket: ${{ steps.jira-key.outputs.issue-key }}"
          
          # Normalize URL (remove trailing slash)
          JIRA_URL="${{ secrets.JIRA_BASE_URL }}"
          JIRA_URL=${JIRA_URL%/}  # Remove trailing slash if present
          
          # Create base64 auth header with no line breaks
          AUTH_HEADER=$(echo -n '${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}' | base64 -w 0)
          
          # Create properly formatted JSON for Jira comment
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Basic $AUTH_HEADER" \
            -d '{
              "body": "üåü *Production Deployment Complete*\n\n*Environment:* Production\n*URL:* https://bug-tracker-cicd-demo.vercel.app\n*Commit:* ${{ github.sha }}\n*Branch:* ${{ github.ref_name }}\n*Author:* ${{ github.actor }}\n*Deployed at:* '$(date -u '+%Y-%m-%d %H:%M:%S UTC')'\n\n‚úÖ All quality gates passed\n‚úÖ Staging tests successful\n‚úÖ Production deployment verified\n‚úÖ Health checks passed\n\nüéâ Feature is now live in production!"
            }' \
            "$JIRA_URL/rest/api/2/issue/${{ steps.jira-key.outputs.issue-key }}/comment" \
            -w "HTTP_STATUS:%{http_code}" \
            -o /tmp/jira_prod_response.json
          
          # Check if the request was successful
          if grep -q "HTTP_STATUS:201" /tmp/jira_prod_response.json 2>/dev/null; then
            echo "‚úÖ Successfully added production comment to Jira ticket"
          else
            echo "‚ö†Ô∏è Jira comment may have failed - continuing anyway"
            cat /tmp/jira_prod_response.json 2>/dev/null || echo "(no response file)"
          fi
          
      - name: üéØ Transition Jira Issue to Done
        if: steps.jira-key.outputs.issue-key != ''
        continue-on-error: true
        run: |
          echo "Transitioning Jira ticket to Done: ${{ steps.jira-key.outputs.issue-key }}"
          
          # Normalize URL (remove trailing slash)
          JIRA_URL="${{ secrets.JIRA_BASE_URL }}"
          JIRA_URL=${JIRA_URL%/}  # Remove trailing slash if present
          
          # Create base64 auth header with no line breaks
          AUTH_HEADER=$(echo -n '${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}' | base64 -w 0)
          
          # First, get available transitions to find the correct transition ID
          echo "Getting available transitions..."
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Basic $AUTH_HEADER" \
            "$JIRA_URL/rest/api/2/issue/${{ steps.jira-key.outputs.issue-key }}/transitions" \
            -o /tmp/transitions.json
          
          # Try to transition to Done (this might fail if transition doesn't exist)
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Basic $AUTH_HEADER" \
            -d '{
              "transition": {
                "name": "Done"
              }
            }' \
            "$JIRA_URL/rest/api/2/issue/${{ steps.jira-key.outputs.issue-key }}/transitions" \
            -w "HTTP_STATUS:%{http_code}" \
            -o /tmp/jira_transition_response.json
          
          # Check if the request was successful
          if grep -q "HTTP_STATUS:204" /tmp/jira_transition_response.json 2>/dev/null; then
            echo "‚úÖ Successfully transitioned Jira ticket to Done"
          else
            echo "‚ö†Ô∏è Jira transition may have failed - this is normal if 'Done' transition doesn't exist"
            echo "Available transitions:"
            cat /tmp/transitions.json 2>/dev/null || echo "(could not get transitions)"
          fi
          
      - name: ‚ÑπÔ∏è Jira Integration Note
        if: steps.jira-key.outputs.issue-key != ''
        run: |
          echo "‚ÑπÔ∏è Attempted to update Jira ticket: ${{ steps.jira-key.outputs.issue-key }}"
          echo "For demo purposes, ensure tickets like DEMO-123, DEMO-124 exist in Jira"
          echo "Pipeline will continue successfully even if Jira integration fails"

  # ==========================================
  # NOTIFICATIONS & REPORTING
  # ==========================================
  notify-success:
    name: üì¢ Success Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, update-jira-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: üì¢ Pipeline Success Notification
        run: |
          echo "üéâ ===== PIPELINE SUCCESS ===== üéâ"
          echo ""
          echo "‚úÖ Quality checks passed"
          echo "‚úÖ All tests passed"
          echo "‚úÖ Build successful"
          echo "‚úÖ Staging deployment successful"
          echo "‚úÖ Production deployment successful"
          echo "‚úÖ Health checks passed"
          echo ""
          echo "üåü Production URL: https://bug-tracker-cicd-demo.vercel.app"
          echo "üß™ Staging URL: https://bug-tracker-demo-staging.vercel.app"
          echo ""
          echo "üìä Commit: ${{ github.sha }}"
          echo "üè∑Ô∏è Branch: ${{ github.ref_name }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo ""
          echo "üöÄ Deployment complete!"

  notify-failure:
    name: üö® Failure Notifications
    runs-on: ubuntu-latest
    needs: [quality, e2e-tests, build, deploy-staging, deploy-production]
    if: always() && (needs.quality.result == 'failure' || needs.e2e-tests.result == 'failure' || needs.build.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    
    steps:
      - name: üö® Pipeline Failure Notification
        run: |
          echo "üö® ===== PIPELINE FAILURE ===== üö®"
          echo ""
          echo "‚ùå Pipeline failed at one or more stages:"
          echo "   - Quality checks: ${{ needs.quality.result }}"
          echo "   - E2E tests: ${{ needs.e2e-tests.result }}"
          echo "   - Build: ${{ needs.build.result }}"
          echo "   - Deploy staging: ${{ needs.deploy-staging.result }}"
          echo "   - Deploy production: ${{ needs.deploy-production.result }}"
          echo ""
          echo "üìä Commit: ${{ github.sha }}"
          echo "üè∑Ô∏è Branch: ${{ github.ref_name }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo ""
          echo "üîç Check the logs above for details"