name: 🚀 CI/CD Pipeline - Bug Tracker Demo

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  # ==========================================
  # QUALITY ASSURANCE & TESTING
  # ==========================================
  quality:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install Dependencies
        run: npm ci
        
      - name: 🧹 ESLint Check
        run: npm run lint
        
      - name: 🧪 Unit Tests
        run: npm run test:coverage
        
      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          
      - name: 💾 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  # ==========================================
  # END-TO-END TESTING
  # ==========================================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install Dependencies
        run: npm ci
        
      - name: 🏗️ Build Application
        run: npm run build
        
      - name: 🎭 Run Cypress E2E Tests
        uses: cypress-io/github-action@v6
        with:
          start: npm start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: chrome
          record: false
          
      - name: 📸 Upload Screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          
      - name: 📹 Upload Videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  # ==========================================
  # BUILD APPLICATION
  # ==========================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [quality, e2e-tests]
    
    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install Dependencies
        run: npm ci
        
      - name: 🏗️ Build Application
        run: npm run build
        
      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            package.json
            package-lock.json
          retention-days: 7

  # ==========================================
  # DEPLOY TO STAGING
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Vercel (Staging)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: 🏥 Health Check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          echo "Testing deployment URL: ${{ steps.deploy.outputs.preview-url }}"
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.preview-url }}")
          if [ $response -eq 200 ]; then
            echo "✅ Staging deployment is healthy (HTTP 200)"
          elif [ $response -eq 401 ]; then
            echo "✅ Staging deployment is healthy (HTTP 401 - Protected by Vercel auth)"
          else
            echo "❌ Staging deployment failed health check (HTTP $response)"
            exit 1
          fi
          
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Staging Deployment Ready!**
              
              📱 Preview URL: ${{ steps.deploy.outputs.preview-url }}
              
              ✅ All tests passed
              ✅ Build successful
              ✅ Deployment completed
              
              Ready for review! 🎉`
            })

  # ==========================================
  # JIRA INTEGRATION - STAGING UPDATES
  # ==========================================
  extract-jira-key-staging:
    name: 📝 Extract Jira Key (Staging)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: contains(github.event.head_commit.message, 'DEMO-') || contains(github.event.pull_request.title, 'DEMO-')
    outputs:
      issue-key: ${{ steps.jira-key.outputs.issue-key }}
    
    steps:
      - name: 📝 Extract Jira Issue Key
        id: jira-key
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            MESSAGE="${{ github.event.pull_request.title }}"
          else
            MESSAGE="${{ github.event.head_commit.message }}"
          fi
          ISSUE_KEY=$(echo "$MESSAGE" | grep -oP 'DEMO-\d+' | head -1)
          echo "issue-key=$ISSUE_KEY" >> $GITHUB_OUTPUT
          echo "Found Jira issue: $ISSUE_KEY"

  update-jira-staging:
    name: 📝 Update Jira (Staging)
    needs: [deploy-staging, extract-jira-key-staging]
    if: needs.extract-jira-key-staging.outputs.issue-key != ''
    uses: ./.github/workflows/jira-notify.yml
    with:
      environment: staging
      deployment_url: ${{ needs.deploy-staging.outputs.preview-url || 'Available via Vercel dashboard' }}
      commit_sha: ${{ github.sha }}
      branch_name: ${{ github.ref_name }}
      author: ${{ github.actor }}
      issue_key: ${{ needs.extract-jira-key-staging.outputs.issue-key }}
      transition_to_done: false
    secrets:
      JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
      JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

  # ==========================================
  # DEPLOY TO PRODUCTION (MANUAL APPROVAL)
  # ==========================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://bug-tracker-cicd-demo.vercel.app
    
    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🌟 Deploy to Vercel (Production)
        id: deploy-prod
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: 🏥 Production Health Check
        run: |
          echo "Waiting for production deployment to be ready..."
          sleep 45
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://bug-tracker-cicd-demo.vercel.app")
            if [ $response -eq 200 ]; then
              echo "✅ Production deployment is healthy (attempt $i)"
              break
            else
              echo "⏳ Health check attempt $i failed (HTTP $response), retrying..."
              sleep 15
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Production health check failed after 5 attempts"
              exit 1
            fi
          done
          
      - name: 🎉 Production Deployment Success
        run: |
          echo "🎉 Production deployment successful!"
          echo "🌟 URL: https://bug-tracker-cicd-demo.vercel.app"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"

  # ==========================================
  # JIRA INTEGRATION - PRODUCTION UPDATES
  # ==========================================
  extract-jira-key-production:
    name: 📝 Extract Jira Key (Production)
    runs-on: ubuntu-latest
    needs: deploy-production
    if: contains(github.event.head_commit.message, 'DEMO-')
    outputs:
      issue-key: ${{ steps.jira-key.outputs.issue-key }}
    
    steps:
      - name: 📝 Extract Jira Issue Key
        id: jira-key
        run: |
          MESSAGE="${{ github.event.head_commit.message }}"
          ISSUE_KEY=$(echo "$MESSAGE" | grep -oP 'DEMO-\d+' | head -1)
          echo "issue-key=$ISSUE_KEY" >> $GITHUB_OUTPUT
          echo "Found Jira issue: $ISSUE_KEY"

  update-jira-production:
    name: 📝 Update Jira (Production)
    needs: [deploy-production, extract-jira-key-production]
    if: needs.extract-jira-key-production.outputs.issue-key != ''
    uses: ./.github/workflows/jira-notify.yml
    with:
      environment: production
      deployment_url: https://bug-tracker-cicd-demo.vercel.app
      commit_sha: ${{ github.sha }}
      branch_name: ${{ github.ref_name }}
      author: ${{ github.actor }}
      issue_key: ${{ needs.extract-jira-key-production.outputs.issue-key }}
      transition_to_done: true
    secrets:
      JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
      JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

  # ==========================================
  # NOTIFICATIONS & REPORTING
  # ==========================================
  notify-success:
    name: 📢 Success Notifications
    needs: [deploy-production, update-jira-production]
    if: always() && needs.deploy-production.result == 'success'
    uses: ./.github/workflows/notify.yml
    with:
      status: success
      commit_sha: ${{ github.sha }}
      branch_name: ${{ github.ref_name }}
      author: ${{ github.actor }}
      production_url: https://bug-tracker-cicd-demo.vercel.app
      staging_url: https://bug-tracker-demo-staging.vercel.app

  notify-failure:
    name: 🚨 Failure Notifications
    needs: [quality, e2e-tests, build, deploy-staging, deploy-production]
    if: always() && (needs.quality.result == 'failure' || needs.e2e-tests.result == 'failure' || needs.build.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    uses: ./.github/workflows/notify.yml
    with:
      status: failure
      commit_sha: ${{ github.sha }}
      branch_name: ${{ github.ref_name }}
      author: ${{ github.actor }}
      job_results: '{"quality":"${{ needs.quality.result }}","e2e-tests":"${{ needs.e2e-tests.result }}","build":"${{ needs.build.result }}","deploy-staging":"${{ needs.deploy-staging.result }}","deploy-production":"${{ needs.deploy-production.result }}"}'